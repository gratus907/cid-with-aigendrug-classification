import torch
from torch.utils.data import Dataset, DataLoader
from sklearn.model_selection import train_test_split
import numpy as np
from torchvision.transforms import transforms

bayesian_weight = np.array([ 6.1005,  5.8649,  4.6503,  3.7304,  1.0000,  1.0000, 10.0000,  1.0000,
                           1.0000,  6.0396,  6.3256,  6.3953,  6.0634,  2.9373,  5.9343,  8.1757,
                           4.8810,  1.0000,  5.8496,  5.9429,  5.1362,  1.0000,  1.0000, 15.8496,
                           15.3051,  3.2193, 10.0000,  1.0000,  1.0000,  1.0000,  1.0000,  1.0000,
                           1.0000, 11.5200,  4.4746,  4.1504,  1.0000,  9.5217,  1.0000,  1.0000,
                           1.0000,  1.0000,  1.0000, 15.8496, 20.0000,  1.0000,  1.0000,  1.0000,
                           1.0000,  1.0000,  1.0000,  1.0000,  1.0000,  1.0000,  1.0000,  1.0000,
                           1.0000,  1.0000,  1.0000,  1.0000,  1.0000,  1.0000,  1.0000,  1.0000,
                           1.0000, 10.0000,  1.0000,  1.0000,  1.0000,  1.0000,  1.0000,  1.0000,
                           1.0000,  1.0000,  1.0000,  1.0000,  1.0000,  1.0000,  1.0000,  1.0000,
                           1.0000,  1.0000,  1.0000,  1.0000,  1.0000,  1.0000,  1.0000,  1.0000,
                           1.0000,  1.0000,  1.0000,  1.0000,  1.0000, 10.0000,  1.0000,  1.0000,
                           1.0000,  1.0000,  1.0000,  1.0000,  1.0000,  1.0000,  1.0000,  1.0000,
                           1.0000,  1.0000,  1.0000,  1.0000,  1.0000,  1.0000,  1.0000,  1.0000,
                           1.0000,  1.0000,  1.0000, 10.7039, 15.8496, 10.0000,  1.0000,  1.0000,
                           1.0000,  1.0000, 10.0000, 10.0000,  1.0000,  1.0000,  1.0000,  1.0000,
                           1.0000, 12.3704,  7.3697, 11.1548, 12.7302,  1.0000,  1.0000,  1.0000,
                           1.0000,  1.0000,  1.0000,  1.0000,  1.0000,  1.0000,  1.0000,  6.1492,
                           3.5614,  5.7447,  5.4130,  5.8496,  8.3007,  7.1049,  4.0526,  1.0000,
                           3.5364,  5.4749,  1.0000,  1.0000,  1.0000,  1.0000,  1.0000,  1.0000,
                           1.9265,  1.0000,  1.0000,  1.0000,  1.0000,  1.0000,  5.8496, 10.0000,
                           1.0000,  1.0000,  1.0000,  1.0000,  1.0000, 10.0000, 10.0000,  1.0000,
                           1.0000,  1.0000,  6.8314,  7.3451,  5.8029,  5.4992,  8.0735, 10.4891,
                           11.5433,  8.3458,  7.7259, 10.0000,  8.1444,  1.5200,  1.0000,  1.0000,
                           7.8617,  2.6919, 30.0000, 15.8496,  1.0000,  1.0000,  1.0000,  1.0000,
                           1.0000, 10.0000,  7.3697,  1.0000,  1.0000,  1.0000,  5.0250, 10.0000,
                           1.0000,  1.0000,  1.0000,  1.0000,  1.0000, 12.4793, 13.2193, 18.0735,
                           18.4800, 10.0000,  5.8496,  5.8496, 10.0000,  1.0000,  1.0000,  1.0000,
                           1.0000,  1.0000,  1.0000,  5.8496, 15.8496,  1.0000,  1.0000,  1.0000,
                           1.0000,  1.0000,  1.0000,  1.0000,  1.0000,  1.0000,  1.0000,  1.0000,
                           1.0000,  1.0000,  1.0000,  1.0000,  1.0000,  1.0000,  1.0000,  1.0000,
                           10.0000,  1.0000,  1.0000, 10.0000,  1.0000,  1.0000,  1.0000,  7.4543,
                           10.7529, 10.6926, 11.8057,  9.4190,  1.0000,  9.3289,  1.0000,  1.0000,
                           1.0000,  1.0000,  1.0000,  1.0000,  1.0000,  1.0000,  1.0000,  1.0000,
                           1.0000,  1.0000, 10.0000,  1.0000, 10.0000,  1.0000,  1.0000,  1.0000,
                           1.0000,  1.0000,  1.0000,  6.0837,  6.1281,  6.0543,  5.7656, 15.8496,
                           1.0000,  1.0000,  1.0000,  1.0000,  1.0000, 11.2262,  9.3587, 10.0000,
                           1.0000, 15.8496,  1.0000,  8.7839, 18.0735, 17.1621,  1.0000,  1.0000,
                           15.8496, 12.4393,  1.0000,  1.0000,  4.0754,  1.0000,  1.0000,  1.0000,
                           1.0000,  1.0000,  1.0000,  1.0000,  1.0000,  1.0000,  1.0000,  1.0000,
                           1.0000,  1.0000,  1.0000,  1.0000,  1.0000,  1.0000,  1.0000, 20.0000,
                           15.8496, 15.8496, 17.3697,  1.0000,  6.2240,  6.7309,  1.0000,  6.5992,
                           10.0000,  1.0000,  2.8339,  1.0000,  6.7043,  5.4749,  9.3587,  1.6992,
                           6.2059,  4.3879,  2.4793,  5.5943, 15.8496,  7.2247,  1.0000,  6.1758,
                           5.7638, 11.3289,  1.0000,  7.1282,  6.6333,  6.6183,  9.2504,  3.2193,
                           1.0000,  1.6992,  9.4342, 14.4057, 16.7807,  4.2838,  3.9748,  7.2247,
                           7.2437,  1.0000,  7.4454,  7.7649,  6.0486,  5.9309,  6.1641,  7.5364,
                           10.2346, 11.8004, 14.3610,  8.0735,  6.5896,  8.3906,  7.4024, 13.9689,
                           7.3697, 13.3121,  8.0145,  8.8604,  8.9308,  4.8543,  5.5529,  2.5652,
                           7.5032,  8.4896, 22.2239, 18.7447,  7.8368,  2.1412, 25.8496,  1.0000,
                           1.0000, 20.0000,  1.0000,  7.8550,  1.0000,  6.1108,  3.9748,  2.6303,
                           1.0000, 19.0689, 10.0000,  1.0000, 14.5170,  1.0000, 13.6257,  1.0000,
                           7.2408,  1.9265,  8.4194, 10.0000,  7.6025, 13.0485, 15.8496, 22.0945,
                           1.0000,  1.0000,  1.0000,  1.9265,  2.6303, 13.2193,  6.9459,  6.9282,
                           13.0743,  1.0000,  7.4748,  6.5208,  1.0000, 10.0000, 10.6609,  7.5590,
                           7.5590,  7.1644,  9.5981,  7.9986,  1.0000,  8.3872,  7.4483,  6.3077,
                           1.0000, 10.5364,  6.0514,  7.7961,  7.4435,  6.7982, 25.4432, 20.0000,
                           1.0000, 13.6257,  2.2239, 11.4296, 10.0000,  7.3697,  1.0000,  1.0000,
                           11.2338, 14.6713, 18.0735, 12.6303, 20.0000,  1.0000,  7.4339, 15.8496,
                           7.7118, 12.2239,  8.3007, 11.2553, 10.0000, 10.0000, 20.0000, 10.0000,
                           11.3750,  1.0000,  7.5987, 15.8496,  6.8589,  4.2626, 14.4057,  4.8543,
                           2.2239, 13.2193,  7.0955,  5.2675, 25.8496, 13.1626,  7.3697,  8.7092,
                           7.0044,  8.0735,  8.7023,  4.6713, 14.7999,  9.4342,  9.5818,  8.8136,
                           4.5943, 18.0735,  7.7118, 14.2033, 10.6413, 17.3697, 30.0000,  9.0689,
                           10.0000, 12.8951, 22.8011, 17.3697,  7.0627, 13.7851, 25.0250,  5.3434,
                           7.4339,  5.9234, 31.6992,  8.9465,  7.4390, 10.0000,  3.2193,  1.0000,
                           5.2303,  1.0000, 11.1346, 14.2742, 16.0572, 17.2247,  1.0000,  7.9290,
                           6.2149,  1.0000,  9.6481,  8.4360,  4.1938,  8.3906,  7.7173,  9.2600,
                           1.6350, 10.4363,  9.9270,  4.6297,  5.9246, 11.8259,  9.6523, 10.0000,
                           7.4213, 12.4511, 18.7447, 10.4008,  7.0955,  1.0000, 24.1504,  9.3860,
                           6.5382,  1.0000,  1.0000,  7.4846,  7.5442, 10.0000,  2.8758,  1.0000,
                           11.6993,  6.6141,  7.0426,  1.3883,  4.1504,  6.8669,  5.6961, 11.8057,
                           10.7155, 14.4252,  7.4213,  8.5864, 10.1436, 11.4439,  6.2891, 13.2193,
                           7.4339,  8.8336, 14.5519,  4.1504, 15.8496, 10.0000,  2.8011,  9.4623,
                           6.0438,  7.2870,  7.6651,  7.2672,  5.3250, 11.0620,  8.8452,  6.9724,
                           12.0231, 11.2928,  6.4816,  7.4213,  8.0177,  4.6566,  8.2805,  8.1943,
                           7.2672, 15.8496,  6.9515,  6.4268,  9.3587,  5.4500,  4.0939,  5.7619,
                           10.0000,  3.6059,  7.3957,  6.3743,  8.1629, 11.4684, 10.8746, 14.0663,
                           20.0000, 15.8496, 10.0000, 10.0000, 10.2405, 12.2239,  2.0163,  1.0000,
                           8.1629, 12.0979,  7.3311, 21.6992,  6.6838,  5.2044,  3.6773,  2.8379,
                           7.2072,  5.9163, 11.4439,  8.4680, 10.0000,  7.5336,  5.9012,  5.3605,
                           10.0000, 15.8496,  5.8496,  8.1889, 15.8496, 16.6297,  6.6816,  5.6018,
                           4.3750,  8.8336, 18.1714,  2.4917,  7.3813,  7.4846,  2.2529,  1.0000,
                           7.5442, 11.0434,  7.6651,  4.4980,  7.3311,  1.0000, 17.3697, 12.7302,
                           13.4680, 18.3954,  6.8513, 17.3697, 14.1504,  7.4339,  7.3813,  6.7874,
                           5.6369,  1.0000,  1.0188,  6.2398,  9.1626,  7.1621,  5.6937,  1.0000,
                           6.6651,  5.9018,  1.9010,  4.2999,  9.0132,  9.5818,  1.3124,  3.7346,
                           6.5407,  6.8669,  6.5382,  8.7447,  4.4980,  1.7284,  1.9265,  7.1272,
                           9.0270, 12.5154,  2.2239,  4.9476,  6.8029,  7.0371,  6.8869,  1.0000,
                           4.7207, 14.2884,  4.5457, 20.0000,  2.3133,  2.6303,  4.1504,  4.1504,
                           4.1504, 12.2239,  2.6303, 10.0000, 10.0000, 22.2239,  8.0735, 10.0000,
                           20.0000,  5.3051, 20.0000, 10.0000,  1.0000,  1.0000,  8.2597,  6.1973,
                           1.0000, 12.4393,  5.8496, 23.2193, 16.6297,  1.0000,  8.3007,  5.8496,
                           10.0000,  7.3697, 13.2193,  1.0000,  1.0000,  4.8543, 20.8746, 10.0000,
                           2.6303,  1.0000, 15.8496,  6.0768,  9.3681, 18.7447,  9.8185,  8.3007,
                           10.0000,  1.1103,  1.0000, 10.9954, 15.8496, 10.0000,  1.0000, 32.4793,
                           1.0000,  1.0000, 10.0000, 10.0000, 15.8496,  3.2193,  1.0000,  1.0000,
                           7.3039,  3.2599, 20.8746,  1.0000,  2.5154,  4.1504,  1.3750,  4.1504,
                           7.5489,  2.6303, 10.0000, 10.0000, 22.2239,  8.0735, 10.0000, 12.6303,
                           5.3051, 20.0000,  1.0000,  1.0000,  1.0000,  5.5849,  5.5748,  1.0000,
                           5.3051,  4.8543, 23.2193,  3.7851,  1.0000,  4.4057,  5.8496, 10.0000,
                           7.3697,  7.3697,  1.0000,  1.0000,  1.0000, 20.8746, 10.0000,  1.0000,
                           1.0000, 15.8496,  7.1187,  8.5914, 20.0000,  7.0895,  6.7807, 10.0000,
                           1.0000,  1.0000,  1.0000, 12.2239, 10.0000,  1.0000, 26.6297,  1.0000,
                           1.0000, 10.8746, 10.0000, 15.8496,  1.0000,  1.0000,  1.0000,  3.2193,
                           4.5943,  1.0000,  1.0000,  1.0000,  1.0000,  1.0000,  1.0000, 10.0000,
                           1.0000,  1.0000,  1.0000,  1.0000,  1.0000,  1.0000,  1.0000,  1.0000,
                           1.0000,  1.0000,  1.0000,  1.0000,  4.4746,  5.5254,  1.0000,  1.0000,
                           1.0000,  1.0000,  1.0000,  1.0000,  1.0000,  1.0000,  1.0000,  1.0000,
                           1.0000,  1.0000,  1.0000,  1.0000,  1.0000,  1.0000,  1.0000,  1.0000,
                           1.0000])

class Chemical:
    def __init__(self, name, smiles, fp, toxicity):
        self.name = name
        self.smiles = smiles
        self.fp = fp
        self.toxicity = toxicity

    def __str__(self):
        return f"CHEMICAL {self.name} {self.smiles} : {self.toxicity} {self.fp}"

def read_files():
    fingerprint_file = open("./data/fingerprint.csv").readlines()
    chemical_dict = dict()
    for line in fingerprint_file:
        content = line.split(',')
        chem_name = content[0].replace('"','')
        fingerprint = []
        for x in content[1:]:
            x = x.strip()
            fingerprint.append(int(x))
        chemical_dict[chem_name] = Chemical(chem_name, "", fingerprint, "")

    chemical_info = open("./data/smiles").readlines()
    for line in chemical_info:
        content = line.split(',')
        chem_name = content[0].replace('"','')
        smiles = content[1]
        toxicity = int(content[2].strip())
        chemical_dict[chem_name].smiles = smiles
        chemical_dict[chem_name].toxicity = toxicity

    return list(chemical_dict.values())

class ChemicalDILIDataset(Dataset):
    def __init__(self, chem, use_torch_tensor = False, weight=True):
        self.chemicals = chem
        self.use_torch_tensor = use_torch_tensor
        self.weight = weight

    def __len__(self):
        return len(self.chemicals)

    def __getitem__(self, idx):
        if self.weight:
            fp = np.array(self.chemicals[idx].fp) * (bayesian_weight)
            fp = (fp - fp.min()) / (fp.max() - fp.min())
        else: fp = np.array(self.chemicals[idx].fp)
        tox = np.array([self.chemicals[idx].toxicity])
        if self.use_torch_tensor:
            fp = torch.Tensor(fp)
            tox = torch.Tensor(tox)
        return fp, tox

def load_DILI_data():
    chemicals = read_files()
    chem_train, chem_test = train_test_split(chemicals, test_size=0.2)
    train_set = ChemicalDILIDataset(chem_train, True)
    test_set = ChemicalDILIDataset(chem_test, True)
    train_loader = DataLoader(train_set, batch_size=1)
    test_loader = DataLoader(test_set)
    return train_loader, test_loader

def read_data_as_np(weight = True):
    chemicals = read_files()
    chem_train, chem_test = train_test_split(chemicals, test_size=0.2)
    train_set = ChemicalDILIDataset(chem_train, use_torch_tensor=False, weight=weight)
    test_set = ChemicalDILIDataset(chem_test, use_torch_tensor=False, weight=weight)
    return train_set, test_set